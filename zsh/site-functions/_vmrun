#compdef vmrun
# ------------------------------------------------------------------------------
# Copyright (c) 2014 Spencer McIntyre
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#   * Neither the name of the project nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL ZSH-USERS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for VMware's vmrun command (http://www.vmware.com/).
#
# ------------------------------------------------------------------------------
# Authors
# -------
#
#  * Spencer McIntyre
#
# ------------------------------------------------------------------------------

_vmrun_util_get_running=("${(@f)$(vmrun list | egrep "\.vmx$")}")
_vmrun_running_cmds=( getGuestIPAddress pause reset stop suspend upgradevm )

_vmrun_util_list_running() {
  _describe -t running_vm 'running vm' _vmrun_util_get_running || compadd "$@"
}

_vmrun_cmd_listSnapshots() {
  local -a _suffix_options
  _suffix_options=( showTree )
  if (( $1 == 2 )); then
    _vmrun_util_list_running
  elif (( $1 == 3)); then
    _normal
  elif (( $1 == 4)); then
    _describe 'option' _suffix_options || compadd "$@"
  fi
}

_vmrun_cmd_snapshot() {
  if (( $1 == 2 )); then
    _vmrun_util_list_running
  elif (( $1 == 3)); then
    _normal
  fi
}

_vmrun_cmd_deleteSnapshot() {
  local -a _suffix_options
  _suffix_options=( andDeleteChildren )
  if (( $1 == 2 )); then
    _vmrun_util_list_running
  elif (( $1 == 3)); then
    _normal
  elif (( $1 == 4)); then
    _describe 'option' _suffix_options || compadd "$@"
  fi
}

_vmrun_cmd_revertToSnapshot() {
  if (( $1 == 2 )); then
    _vmrun_util_list_running
  elif (( $1 == 3)); then
    _normal
  fi
}

_vmrun_cmd_writeVariable() {
  local -a _env_types
  _env_types=( runtimeConfig guestEnv guestVar )
  if (( $1 == 2 )); then
    _vmrun_util_list_running
  elif (( $1 == 3)); then
    _describe 'var type' _env_types || compadd "$@"
  elif (( $1 == 4)); then
    _normal
  elif (( $1 == 5)); then
    _normal
  fi
}

_vmrun_cmd_readVariable() {
  local -a _env_types
  _env_types=( runtimeConfig guestEnv guestVar )
  if (( $1 == 2 )); then
    _vmrun_util_list_running
  elif (( $1 == 3)); then
    _describe 'var type' _env_types || compadd "$@"
  elif (( $1 == 4)); then
    _normal
  fi
}

_vmrun_command() {
  local -a _vmrun_cmds
  # Descriptions taken from vmrun --help.
  _vmrun_cmds=(
    # Power Commands
    'start:Start a VM or Team'
    'stop:Stop a VM or Team'
    'reset:Reset a VM or Team'
    'suspend:Suspend a VM or Team'
    'pause:Pause a VM'
    'unpause:Unpause a VM'

    # Snapshot Commands
    'listSnapshots:List all snapshots in a VM'
    'snapshot:Create a snapshot of a VM'
    'deleteSnapshot:Remove a snapshot from a VM'
    'revertToSnapshot:Set VM state to a snapshot'

    # Guest OS Commands
    'listProcessesInGuest:List running processes in Guest OS'
    'writeVariable:Write a variable in the VM state'
    'readVariable:Read a variable in the VM state'
    'getGuestIPAddress:Gets the IP address of the guest'

    # General Commands
    'list:List all running VMs'
    'upgradevm:Upgrade VM file format, virtual hw'
    'installTools:Install Tools in Guest'
    'checkToolsState:Check the current Tools state'
    'register:Register a VM'
    'unregister:Unregister a VM'
    'listRegisteredVM:List registered VMs'
    'deleteVM:Delete a VM'
  )

  if (( CURRENT == 1 )); then
    _describe "options" _vmrun_cmds
  else
    local curcontext="$curcontext"
    cmd="${${_vmrun_cmds[(r)$words[1]:*]%%:*}}"
    if (( $#cmd )); then
      if (( $+functions[_vmrun_cmd_$cmd] )); then
        _vmrun_cmd_$cmd CURRENT
      elif [[ -n ${(M)_vmrun_running_cmds:#${cmd}} ]] ; then
        _vmrun_util_list_running
      else
        _files
      fi
    else
      _message "unknown vmrun command: $words[1]"
    fi
  fi
}

_arguments \
  {-h,--help}'[Show help text]' \
  '-vp[Encrypted VM password]' \
  '-gu[Guest username]' \
  '-gp[Guest password]' \
  '-T:VMWare host type:(esx player server server1 vc ws)' \
  '*::vmrun commands:_vmrun_command'
