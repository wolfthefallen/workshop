#
# /etc/zshrc is sourced in interactive shells.  It
# should contain commands to set up aliases, functions,
# options, key bindings, etc.
#

autoload -U compinit
compinit
autoload -U colors
colors
autoload -U zmv

# Set prompts
if [ "$(whoami)" = 'root' ]; then
	DEFAULTPROMPT="%{$bg[red]$fg[white]%}%* %c %{$reset_color%}% " # root prompt
else
	DEFAULTPROMPT="%{$bg[green]$fg[white]%}%* %c %{$reset_color%}% " # default prompt
fi
PROMPT=$DEFAULTPROMPT

bindkey ' ' magic-space  # also do history expansion on space
bindkey -e

_src_etc_profile_d()
{
	#  Make the *.sh things happier, and have possible ~/.zshenv options like
	# NOMATCH ignored.
	emulate -L ksh

	# from bashrc, with zsh fixes
	if [[ ! -o login ]]; then # We're not a login shell
		for i in /etc/profile.d/*.sh; do
		if [ -r "$i" ]; then
			. $i
		fi
		done
		unset i
	fi
}
_src_etc_profile_d

unset -f _src_etc_profile_d
unsetopt beep

setopt append_history
setopt autocd
setopt correct
setopt extendedglob
setopt extended_history
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt menucomplete

zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'

# Aliases
alias cd-git-root='cd $(git rev-parse --show-toplevel)'
alias l='ls -lha'
alias pdb='python -m pdb'
alias pip-update="pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs pip install -U"
alias prompt-clean='PROMPT="%{$fg[green]%}[%c]%# %{$reset_color%}%"'
alias pyhttpd='python -m SimpleHTTPServer'
alias python-clean="find . -type f -regex \".*\\.pyc$\" -exec rm -f '{}' \;"
alias regrep='grep -EHnr'
alias recgrep='grep -EHnr --color=always'
alias rsync='rsync -P'
alias vmsuspend='vmrun list | egrep ".*\.vmx$" | while read vm; do echo "suspending $vm"; vmrun suspend $vm; done'
alias xclipin='xclip -i -selection clipboard'
alias xclipout='xclip -o -selection clipboard'

# Functions
github-clone() {
	git clone git@github.com:$1.git
}

hashfile() {
	for file in "$@"; do
		if [ -f "$file" ]; then
			echo "hashing: $file";
			echo "md5  $file $(md5sum $file | awk '{print $1}')";
			echo "sha1 $file $(sha1sum $file | awk '{print $1}')";
		else
			echo "invalid file: $file"
		fi
	done
}

python-install() {
	if [ -f "requirements.txt" ]; then
		pip install -r requirements.txt
	fi
	if [ -f "setup.py" ]; then
		python setup.py build
		sudo python setup.py install
	else
		echo $fg[red]"No setup.py file found"$reset_color
	fi
	rm -rf build
}

python-test() {
	if [ ! -f "tests.py" -a ! -f "tests/__init__.py" ]; then
		echo $fg[red]"No python unit tests found"$reset_color
		return 0
	fi
	ALL_TESTS_PASSED=1
	if [ -f ".travis.yml" ]; then
		print_status "Testing based on Travis-CI configuration"

		for version in $(python -m smoke_zephyr.configuration .travis.yml python); do
			if [ -f "$(which python$version 2>/dev/null)" ]; then
				print_status "Testing with Python $version"
				python$version -m unittest -v tests
				if [ $? -eq 0 ]; then
					echo "All Python $version tests completed successfully"
				else
					echo $fg[red]"Python $version tests did not complete successfully"$reset_color
					ALL_TESTS_PASSED=0
				fi
			else
				print_warning "Skipping Python $version due to missing binary"
			fi
		done
	else
		python -m unittest -v tests
		if [ ! $? -eq 0 ]; then
			ALL_TESTS_PASSED=0
		fi
	fi
	if [ "$ALL_TESTS_PASSED" -eq 1 ]; then
		print_good "All tests completed successfully"
		return 0
	fi
	print_error "One or more test failed to complete successfully"
	return 1
}
